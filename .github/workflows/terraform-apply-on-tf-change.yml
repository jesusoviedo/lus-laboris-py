name: Terraform Apply on .tf Change

on:
  push:
    paths:
    - terraform/**/*.tf

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      GCP_BUCKET_NAME: ${{ vars.GCP_BUCKET_NAME }}
      GCP_CLOUD_RUN_BATCH_JOB_NAME: ${{ vars.GCP_CLOUD_RUN_BATCH_JOB_NAME }}
      GCP_CLOUD_RUN_BATCH_SCHEDULE: ${{ vars.GCP_CLOUD_RUN_BATCH_SCHEDULE }}
      GCP_CLOUD_RUN_BATCH_IMAGE: ${{ vars.GCP_CLOUD_RUN_BATCH_IMAGE }}
      GCP_CLOUD_RUN_BATCH_ARGS: ${{ vars.GCP_CLOUD_RUN_BATCH_ARGS }}
      GCP_CLOUD_RUN_BATCH_NOTIFY_EMAIL: ${{ vars.GCP_CLOUD_RUN_BATCH_NOTIFY_EMAIL }}
      QDRANT_VM_NAME: ${{ vars.QDRANT_VM_NAME }}
      QDRANT_VM_MACHINE_TYPE: ${{ vars.QDRANT_VM_MACHINE_TYPE }}
      QDRANT_VM_ZONE: ${{ vars.QDRANT_VM_ZONE }}
      QDRANT_VM_DISK_SIZE: ${{ vars.QDRANT_VM_DISK_SIZE }}
      GCP_CLOUD_RUN_API_SERVICE_NAME: ${{ vars.GCP_CLOUD_RUN_API_SERVICE_NAME }}
      GCP_CLOUD_RUN_API_IMAGE: ${{ vars.GCP_CLOUD_RUN_API_IMAGE }}
      GCP_CLOUD_RUN_API_CONTAINER_PORT: ${{ vars.GCP_CLOUD_RUN_API_CONTAINER_PORT }}
      GCP_CLOUD_RUN_API_CPU: ${{ vars.GCP_CLOUD_RUN_API_CPU }}
      GCP_CLOUD_RUN_API_MEMORY: ${{ vars.GCP_CLOUD_RUN_API_MEMORY }}
      GCP_CLOUD_RUN_API_MIN_INSTANCES: ${{ vars.GCP_CLOUD_RUN_API_MIN_INSTANCES }}
      GCP_CLOUD_RUN_API_MAX_INSTANCES: ${{ vars.GCP_CLOUD_RUN_API_MAX_INSTANCES }}
      GCP_CLOUD_RUN_API_TIMEOUT: ${{ vars.GCP_CLOUD_RUN_API_TIMEOUT }}
    steps:
    - id: checkout
      name: Checkout code
      uses: actions/checkout@v5

    - id: setup_gcloud
      name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v3
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GSA_KEY }}
        export_default_credentials: true

    - id: setup_terraform
      name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - id: generate_env
      name: Generate .env file
      run: |
        cat <<EOF > .env
        GCP_PROJECT_ID=${GCP_PROJECT_ID}
        GCP_REGION=${GCP_REGION}
        GCP_BUCKET_NAME=${GCP_BUCKET_NAME}
        GCP_CLOUD_RUN_BATCH_JOB_NAME=${GCP_CLOUD_RUN_BATCH_JOB_NAME}
        GCP_CLOUD_RUN_BATCH_SCHEDULE=${GCP_CLOUD_RUN_BATCH_SCHEDULE}
        GCP_CLOUD_RUN_BATCH_IMAGE=${GCP_CLOUD_RUN_BATCH_IMAGE}
        GCP_CLOUD_RUN_BATCH_ARGS=${GCP_CLOUD_RUN_BATCH_ARGS}
        GCP_CLOUD_RUN_BATCH_NOTIFY_EMAIL=${GCP_CLOUD_RUN_BATCH_NOTIFY_EMAIL}
        QDRANT_VM_NAME=${QDRANT_VM_NAME}
        QDRANT_VM_MACHINE_TYPE=${QDRANT_VM_MACHINE_TYPE}
        QDRANT_VM_ZONE=${QDRANT_VM_ZONE}
        QDRANT_VM_DISK_SIZE=${QDRANT_VM_DISK_SIZE}
        GCP_CLOUD_RUN_API_SERVICE_NAME=${GCP_CLOUD_RUN_API_SERVICE_NAME}
        GCP_CLOUD_RUN_API_IMAGE=${GCP_CLOUD_RUN_API_IMAGE}
        GCP_CLOUD_RUN_API_CONTAINER_PORT=${GCP_CLOUD_RUN_API_CONTAINER_PORT}
        GCP_CLOUD_RUN_API_CPU=${GCP_CLOUD_RUN_API_CPU}
        GCP_CLOUD_RUN_API_MEMORY=${GCP_CLOUD_RUN_API_MEMORY}
        GCP_CLOUD_RUN_API_MIN_INSTANCES=${GCP_CLOUD_RUN_API_MIN_INSTANCES}
        GCP_CLOUD_RUN_API_MAX_INSTANCES=${GCP_CLOUD_RUN_API_MAX_INSTANCES}
        GCP_CLOUD_RUN_API_TIMEOUT=${GCP_CLOUD_RUN_API_TIMEOUT}
        EOF

    - id: terraform_init
      name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - id: create_tfvars
      name: Crear archivo terraform.tfvars
      working-directory: ./terraform
      run: bash tf_menu.sh 2

    - id: terraform_plan
      name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan

    - id: terraform_apply
      name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve
