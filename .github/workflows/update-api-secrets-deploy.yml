name: Update API Secrets & Deploy

on:
  workflow_dispatch:

jobs:
  update-and-deploy:
    name: Update Secrets & Deploy API
    runs-on: ubuntu-latest
    env:
      # Secrets
      GSA_KEY: ${{ secrets.GSA_KEY }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      API_ENV_FILE: ${{ secrets.API_ENV_FILE }}
      JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      # Variables
      GCP_CLOUD_RUN_API_SERVICE_NAME: ${{ vars.GCP_CLOUD_RUN_API_SERVICE_NAME }}
      DOCKER_IMAGE_NAME_RAG_API: ${{ vars.DOCKER_IMAGE_NAME_RAG_API }}
      GCP_CLOUD_RUN_API_IMAGE_TAG: ${{ vars.GCP_CLOUD_RUN_API_IMAGE_TAG }}
      GCP_CLOUD_SECRETS_UPDATE: ${{ vars.GCP_CLOUD_SECRETS_UPDATE }}
      GCP_CLOUD_SECRETS_API_ENV_ID: ${{ vars.GCP_CLOUD_SECRETS_API_ENV_ID }}
      GCP_CLOUD_SECRETS_JWT_KEY_ID: ${{ vars.GCP_CLOUD_SECRETS_JWT_KEY_ID }}
      GCP_CLOUD_RUN_API_CONTAINER_PORT: ${{ vars.GCP_CLOUD_RUN_API_CONTAINER_PORT }}
      GCP_CLOUD_RUN_API_CPU: ${{ vars.GCP_CLOUD_RUN_API_CPU }}
      GCP_CLOUD_RUN_API_MEMORY: ${{ vars.GCP_CLOUD_RUN_API_MEMORY }}
      GCP_CLOUD_RUN_API_MIN_INSTANCES: ${{ vars.GCP_CLOUD_RUN_API_MIN_INSTANCES }}
      GCP_CLOUD_RUN_API_MAX_INSTANCES: ${{ vars.GCP_CLOUD_RUN_API_MAX_INSTANCES }}
      GCP_CLOUD_RUN_API_TIMEOUT: ${{ vars.GCP_CLOUD_RUN_API_TIMEOUT }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ env.GSA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Update Secrets in Secret Manager
      if: ${{ env.GCP_CLOUD_SECRETS_UPDATE == 'true' }}
      run: |
        echo "üìù Updating secrets in Secret Manager..."

        # Update .env file secret
        echo "${API_ENV_FILE}" | \
          gcloud secrets versions add ${GCP_CLOUD_SECRETS_API_ENV_ID} \
          --data-file=- \
          --project=${GCP_PROJECT_ID}

        echo "‚úÖ .env secret updated"

        # Update JWT public key secret
        echo "${JWT_PUBLIC_KEY}" | \
          gcloud secrets versions add ${GCP_CLOUD_SECRETS_JWT_KEY_ID} \
          --data-file=- \
          --project=${GCP_PROJECT_ID}

        echo "‚úÖ JWT public key secret updated"
        echo "‚úÖ All secrets updated successfully"

    - name: Deploy API to Cloud Run
      run: |
        IMAGE="${DOCKER_HUB_USERNAME}/${DOCKER_IMAGE_NAME_RAG_API}:${GCP_CLOUD_RUN_API_IMAGE_TAG}"

        echo "üöÄ Deploying ${IMAGE} to ${GCP_CLOUD_RUN_API_SERVICE_NAME}..."

        gcloud run deploy ${GCP_CLOUD_RUN_API_SERVICE_NAME} \
          --image=${IMAGE} \
          --region=${GCP_REGION} \
          --project=${GCP_PROJECT_ID} \
          --port=${GCP_CLOUD_RUN_API_CONTAINER_PORT} \
          --set-env-vars="API_HOST=0.0.0.0,API_PORT=${GCP_CLOUD_RUN_API_CONTAINER_PORT},API_RELOAD=false,API_JWT_PUBLIC_KEY_PATH=/app/secrets/jwt/public_key.pem,API_ENV_FILE_PATH=/app/secrets/env/.env" \
          --update-secrets="/app/secrets/env/.env=${GCP_CLOUD_SECRETS_API_ENV_ID}:latest,/app/secrets/jwt/public_key.pem=${GCP_CLOUD_SECRETS_JWT_KEY_ID}:latest" \
          --cpu=${GCP_CLOUD_RUN_API_CPU} \
          --memory=${GCP_CLOUD_RUN_API_MEMORY} \
          --min-instances=${GCP_CLOUD_RUN_API_MIN_INSTANCES} \
          --max-instances=${GCP_CLOUD_RUN_API_MAX_INSTANCES} \
          --timeout=${GCP_CLOUD_RUN_API_TIMEOUT} \
          --allow-unauthenticated

        echo "‚úÖ API deployed successfully!"

    - name: Get Service URL
      run: |
        URL=$(gcloud run services describe ${GCP_CLOUD_RUN_API_SERVICE_NAME} \
          --region=${GCP_REGION} \
          --format='value(status.url)' \
          --project=${GCP_PROJECT_ID})

        echo "üåê Service URL: ${URL}"
        echo "üìã Health Check: ${URL}/api/health"
        echo "üìä Status Endpoint: ${URL}/api/status"
