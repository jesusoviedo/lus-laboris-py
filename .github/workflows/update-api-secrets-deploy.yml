name: Update API Secrets & Deploy

on:
  workflow_dispatch:

jobs:
  update-and-deploy:
    name: Update Secrets & Deploy API
    runs-on: ubuntu-latest
    env:
      GCP_CLOUD_SECRETS_UPDATE: ${{ vars.GCP_CLOUD_SECRETS_UPDATE }}
      GCP_CLOUD_SECRETS_API_ENV_ID: ${{ vars.GCP_CLOUD_SECRETS_API_ENV_ID }}
      GCP_CLOUD_SECRETS_JWT_KEY_ID: ${{ vars.GCP_CLOUD_SECRETS_JWT_KEY_ID }}
      GCP_CLOUD_RUN_API_CONTAINER_PORT: ${{ vars.GCP_CLOUD_RUN_API_CONTAINER_PORT }}
      GCP_CLOUD_RUN_API_CPU: ${{ vars.GCP_CLOUD_RUN_API_CPU }}
      GCP_CLOUD_RUN_API_MEMORY: ${{ vars.GCP_CLOUD_RUN_API_MEMORY }}
      GCP_CLOUD_RUN_API_MIN_INSTANCES: ${{ vars.GCP_CLOUD_RUN_API_MIN_INSTANCES }}
      GCP_CLOUD_RUN_API_MAX_INSTANCES: ${{ vars.GCP_CLOUD_RUN_API_MAX_INSTANCES }}
      GCP_CLOUD_RUN_API_TIMEOUT: ${{ vars.GCP_CLOUD_RUN_API_TIMEOUT }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GSA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Update Secrets in Secret Manager
      if: ${{ env.GCP_CLOUD_SECRETS_UPDATE == 'true' }}
      run: |
        echo "üìù Updating secrets in Secret Manager..."

        # Update .env file secret
        echo "${{ secrets.API_ENV_FILE }}" | \
          gcloud secrets versions add ${{ env.GCP_CLOUD_SECRETS_API_ENV_ID }} \
          --data-file=- \
          --project=${{ secrets.GCP_PROJECT_ID }}

        echo "‚úÖ .env secret updated"

        # Update JWT public key secret
        echo "${{ secrets.JWT_PUBLIC_KEY }}" | \
          gcloud secrets versions add ${{ env.GCP_CLOUD_SECRETS_JWT_KEY_ID }} \
          --data-file=- \
          --project=${{ secrets.GCP_PROJECT_ID }}

        echo "‚úÖ JWT public key secret updated"
        echo "‚úÖ All secrets updated successfully"

    - name: Deploy API to Cloud Run
      run: |
        IMAGE_TAG="${{ vars.GCP_CLOUD_RUN_API_IMAGE_TAG }}"
        SERVICE_NAME="${{ vars.GCP_CLOUD_RUN_API_SERVICE_NAME }}"
        REGION="${{ secrets.GCP_REGION }}"
        IMAGE="${{ vars.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME_RAG_API }}:${IMAGE_TAG}"

        echo "üöÄ Deploying ${IMAGE} to ${SERVICE_NAME}..."

        gcloud run deploy ${SERVICE_NAME} \
          --image=${IMAGE} \
          --region=${REGION} \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --port=${{ env.GCP_CLOUD_RUN_API_CONTAINER_PORT }} \
          --set-env-vars="API_HOST=0.0.0.0,API_PORT=${{ env.GCP_CLOUD_RUN_API_CONTAINER_PORT }},API_RELOAD=false,API_JWT_PUBLIC_KEY_PATH=/app/secrets/jwt/public_key.pem,API_ENV_FILE_PATH=/app/secrets/env/.env" \
          --update-secrets="/app/secrets/env/.env=${{ env.GCP_CLOUD_SECRETS_API_ENV_ID }}:latest,/app/secrets/jwt/public_key.pem=${{ env.GCP_CLOUD_SECRETS_JWT_KEY_ID }}:latest" \
          --cpu=${{ env.GCP_CLOUD_RUN_API_CPU }} \
          --memory=${{ env.GCP_CLOUD_RUN_API_MEMORY }} \
          --min-instances=${{ env.GCP_CLOUD_RUN_API_MIN_INSTANCES }} \
          --max-instances=${{ env.GCP_CLOUD_RUN_API_MAX_INSTANCES }} \
          --timeout=${{ env.GCP_CLOUD_RUN_API_TIMEOUT }} \
          --allow-unauthenticated

        echo "‚úÖ API deployed successfully!"

    - name: Get Service URL
      run: |
        SERVICE_NAME="${{ vars.GCP_CLOUD_RUN_API_SERVICE_NAME }}"
        REGION="${{ secrets.GCP_REGION }}"

        URL=$(gcloud run services describe ${SERVICE_NAME} \
          --region=${REGION} \
          --format='value(status.url)' \
          --project=${{ secrets.GCP_PROJECT_ID }})

        echo "üåê Service URL: ${URL}"
        echo "üìã Health Check: ${URL}/api/health"
        echo "üìä Status Endpoint: ${URL}/api/status"
